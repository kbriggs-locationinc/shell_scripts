#!/usr/bin/env node

const readline = require('readline');
const { exec, spawn } = require('child_process');

let branchList = [];
let mergedBranchList = [];
let deleteCounter = 0;

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

exec('git branch --merged develop', (err, stdout, stderr)=> {
  if (err) {
    console.log(`Error: ${err}`)
  }
  mergedBranchList = filterBranches(stdout);
  getBranches();
})


function getBranches() {
  exec('git branch', (err, stdout, stderr)=> {
    if (err) {
      console.log(`Error: ${err}`)
    }
    branchList = filterBranches(stdout);
    askQuestions();
  })
}

function handleResponse(answer) {
  return new Promise((resolve, reject)=> {
    if (answer == 'y' || answer == 'yes') {
      exec(`git branch -D ${branchList[0]}`, (err, stdout)=> {
        if (err) {
          return console.log(err);
        } else {
          process.stdout.write(stdout)
          deleteCounter++;
          branchList.shift();
          resolve()
        }
      });
    }
    else if (answer == 'n' || answer == 'no') {
      console.log(`Spared branch ${branchList[0]}`)
      branchList.shift();
      resolve();
    }
  })
}


function askQuestions() {
  const mergedWithDevelopWarning = mergedBranchList.includes(branchList[0]) ? "" : "\x1b[31m * Not merged with develop * \x1b[0m";
  rl.question(`Delete branch \x1b[32m${branchList[0]}\x1b[0m? ${mergedWithDevelopWarning}> `, async (answer)=> {
    await handleResponse(answer);
    if (branchList.length) {
      askQuestions();
    } else {
      console.log(`Deleted ${deleteCounter} branch${deleteCounter == 1 ? '' : 'es'}.`);
      rl.close()
    }
  })
}

function filterBranches(input) {
  const unfilteredBranchList = input.split("\n");
  return unfilteredBranchList
  .filter((branch)=> {
    return branch[0] != "*" && branch.length
  })
  .map((branch)=> {
    return branch.trim();
  });
}
